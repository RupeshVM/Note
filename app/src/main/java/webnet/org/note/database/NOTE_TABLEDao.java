package webnet.org.note.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE__TABLE".
*/
public class NOTE_TABLEDao extends AbstractDao<NOTE_TABLE, Long> {

    public static final String TABLENAME = "NOTE__TABLE";

    /**
     * Properties of entity NOTE_TABLE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TITLE = new Property(1, String.class, "TITLE", false, "TITLE");
        public final static Property IMAGE = new Property(2, String.class, "IMAGE", false, "IMAGE");
        public final static Property DESCRIPTION = new Property(3, String.class, "DESCRIPTION", false, "DESCRIPTION");
        public final static Property DATE = new Property(4, String.class, "DATE", false, "DATE");
    };


    public NOTE_TABLEDao(DaoConfig config) {
        super(config);
    }
    
    public NOTE_TABLEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE__TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: TITLE
                "\"IMAGE\" TEXT," + // 2: IMAGE
                "\"DESCRIPTION\" TEXT," + // 3: DESCRIPTION
                "\"DATE\" TEXT);"); // 4: DATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE__TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NOTE_TABLE entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindString(2, TITLE);
        }
 
        String IMAGE = entity.getIMAGE();
        if (IMAGE != null) {
            stmt.bindString(3, IMAGE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(4, DESCRIPTION);
        }
 
        String DATE = entity.getDATE();
        if (DATE != null) {
            stmt.bindString(5, DATE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NOTE_TABLE entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindString(2, TITLE);
        }
 
        String IMAGE = entity.getIMAGE();
        if (IMAGE != null) {
            stmt.bindString(3, IMAGE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(4, DESCRIPTION);
        }
 
        String DATE = entity.getDATE();
        if (DATE != null) {
            stmt.bindString(5, DATE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NOTE_TABLE readEntity(Cursor cursor, int offset) {
        NOTE_TABLE entity = new NOTE_TABLE( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TITLE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IMAGE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DESCRIPTION
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // DATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NOTE_TABLE entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTITLE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIMAGE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDESCRIPTION(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDATE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NOTE_TABLE entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NOTE_TABLE entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
